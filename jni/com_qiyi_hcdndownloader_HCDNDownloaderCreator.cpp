#include "com_qiyi_hcdndownloader_HCDNDownloaderCreator.h"#include "com_qiyi_hcdndownloader_HCDNDownloaderCreatorEx.h"#include "CubeTaskCallBackImpl.h"#ifdef HCDN_AD#include "IHCDNAd.h"#endif#include "PublicMethod.h"#include <android/log.h>#include <stdlib.h>#include <string>#include "stdafx.h"IHCDNDownloaderCreator* gIHCDNDownloaderCreator = NULL;CCubeTaskCallBackImpl* gCubeTaskCallBackImpl = NULL;int g_iJNIRefCount = 0;psl::CLock g_JNIlock;//#define CUPID_TEST_#ifdef CUPID_TEST_#include "../../QyAd/Class/Ad/CupidHelper.h"#endif#ifdef __cplusplusextern "C" {  #endif    JNIEXPORT jobject  JNICALL Java_com_qiyi_hcdndownloader_HCDNDownloaderCreator_CreateTaskNative(JNIEnv *env        , jobject creator        , jstring jalbumid        , jstring jtvid        , jstring jvid        , jstring jfile_path        , jstring juser_uuid        , jstring jpassport_id        , jstring jpassport_cookie        , jstring jqypid        , jboolean jvip)    {        if(NULL == gIHCDNDownloaderCreator)        {            psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Fatal, "%s %d: gIHCDNDownloaderCreator not init\r\n",__FUNCTION__,__LINE__);            return NULL;        }        if((NULL == env)||(NULL == jalbumid)||(NULL == jtvid)||(NULL == jvid)||(NULL == juser_uuid)||(NULL == jfile_path)||(NULL == jqypid))        {            psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Fatal, "%s %d: param not enough\r\n",__FUNCTION__,__LINE__);            return NULL;        }        const char *passport_id = NULL;        const char *passport_cookie = NULL;        const char *albumid = env->GetStringUTFChars(jalbumid,NULL);        const char *tvid = env->GetStringUTFChars(jtvid,NULL);        const char *vid = env->GetStringUTFChars(jvid,NULL);        const char *user_uuid = env->GetStringUTFChars(juser_uuid,NULL);        const char *file_path = env->GetStringUTFChars(jfile_path,NULL);        const char *qypid = env->GetStringUTFChars(jqypid,NULL);        if(NULL == jpassport_id)        {            passport_id = NULL;            psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Debug, "%s %d: NULL == jpassport_id\r\n",__FUNCTION__,__LINE__);        }        else         {            passport_id = env->GetStringUTFChars(jpassport_id,NULL);            if(0 == strcmp(passport_id,""))            {                env->ReleaseStringUTFChars(jpassport_id,passport_id);                passport_id = NULL;                psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Fatal, "%s %d: passport_id = empty\r\n",__FUNCTION__,__LINE__);            }            else            {                psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Debug, "%s %d: passport_id =%s\r\n",__FUNCTION__,__LINE__,passport_id);            }        }        if(NULL == jpassport_cookie)        {            passport_cookie = NULL;            psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Debug, "%s %d: NULL == jpassport_cookie\r\n",__FUNCTION__,__LINE__);        }        else         {            passport_cookie = env->GetStringUTFChars(jpassport_cookie,NULL);            if(0 == strcmp(passport_cookie,""))            {                env->ReleaseStringUTFChars(jpassport_cookie,passport_cookie);                passport_cookie = NULL;                psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Fatal, "%s %d: passport_cookie = empty\r\n",__FUNCTION__,__LINE__);            }            else            {			                psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Debug, "%s %d: passport_cookie =%s\r\n",__FUNCTION__,__LINE__,passport_cookie);            }        }        psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Fatal, "%s %d: albumid = %s,tvid = %s,vid = %s,file_path = %s,user_uuid = %s,qypid = %s,\r\n"																					,__FUNCTION__,__LINE__,																					albumid,tvid,vid,file_path,user_uuid,qypid);        IHCDNDownloaderTask* hcdntask =NULL;        hcdntask = gIHCDNDownloaderCreator->CreateTask(albumid,tvid,vid,file_path,user_uuid,passport_id,passport_cookie,qypid,jvip);        if(NULL == hcdntask)        {            psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Fatal, "%s %d: gIHCDNDownloaderCreator->CreateTask failed\r\n",__FUNCTION__,__LINE__);            return NULL;        }        psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Fatal, "%s %d: CreateTask end\r\n",__FUNCTION__,__LINE__);        jobject jtask= NULL;        jclass cls = env->FindClass("com/qiyi/hcdndownloader/HCDNDownloaderTask");        if (NULL == cls)         {            psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Fatal, "%s %d: NULL == localRefCls\r\n",__FUNCTION__,__LINE__);            gIHCDNDownloaderCreator->DestroryTask(hcdntask);            env->DeleteLocalRef(cls);            return NULL;        }        jmethodID mid = env->GetMethodID(cls,"<init>","()V");        if(NULL == mid)        {            psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Fatal, "%s %d: NULL == mid\r\n",__FUNCTION__,__LINE__);            return NULL;        }        jtask=env->NewObject(cls,mid);        if(NULL == jtask)        {            psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Fatal, "%s %d: NULL == jtask\r\n",__FUNCTION__,__LINE__);            gIHCDNDownloaderCreator->DestroryTask(hcdntask);            env->DeleteLocalRef(cls);            return NULL;        }        else        {            psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Fatal, "%s %d: jtask creat success,hcdntask = %p\r\n",__FUNCTION__,__LINE__,hcdntask);            jfieldID fid = env->GetFieldID( cls, "jtaskptr", "J");            if (fid != 0)            {                jlong taskptr = (jlong)hcdntask;                env->SetLongField( jtask, fid, taskptr);             }        }        env->DeleteLocalRef(cls);        env->ReleaseStringUTFChars(jalbumid,albumid);        env->ReleaseStringUTFChars(jtvid,tvid);        env->ReleaseStringUTFChars(jvid,vid);        env->ReleaseStringUTFChars(juser_uuid,user_uuid);        env->ReleaseStringUTFChars(jfile_path,file_path);        env->ReleaseStringUTFChars(jqypid,qypid);        if(NULL != passport_id)            env->ReleaseStringUTFChars(jpassport_id,passport_id);        if(NULL != passport_cookie)            env->ReleaseStringUTFChars(jpassport_cookie,passport_cookie);        return jtask;    }    JNIEXPORT jobject  JNICALL Java_com_qiyi_hcdndownloader_HCDNDownloaderCreator_CreateTaskByUrlNative(JNIEnv *env        , jobject creator        , jstring jurl        , jstring jfile_size        , jstring jfile_path        , jstring juser_uuid        , jstring jqypid        , jstring jfid)    {        if(NULL == gIHCDNDownloaderCreator)        {            psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Fatal, "%s %d: gIHCDNDownloaderCreator not init\r\n",__FUNCTION__,__LINE__);            return NULL;        }	        if((NULL == env)||(NULL == jurl)||(NULL == jfile_path)||(NULL == juser_uuid)||(NULL == jfid))        {            psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Fatal, "%s %d: param not enough\r\n",__FUNCTION__,__LINE__);            return NULL;        }        const char *file_size;        const char *qypid;        const char *url = env->GetStringUTFChars(jurl,NULL);        const char *fid = env->GetStringUTFChars(jfid,NULL);        const char *user_uuid = env->GetStringUTFChars(juser_uuid,NULL);        const char *file_path = env->GetStringUTFChars(jfile_path,NULL);        if(NULL == jfile_size)        {            file_size = NULL;            psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Debug, "%s %d: NULL == jfile_size\r\n",__FUNCTION__,__LINE__);        }        else         {            file_size = env->GetStringUTFChars(jfile_size,NULL);            if(0 == strcmp(file_size,"0"))            {                env->ReleaseStringUTFChars(jfile_size,file_size);                file_size =NULL;                psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Debug, "%s %d: file_size =NULL\r\n",__FUNCTION__,__LINE__);            }            else            {                psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Debug, "%s %d: file_size = %s\r\n",__FUNCTION__,__LINE__,file_size);            }        }        if(NULL == jqypid)        {            qypid = NULL;            psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Debug, "%s %d: NULL == jqypid\r\n",__FUNCTION__,__LINE__);        }        else         {            qypid = env->GetStringUTFChars(jqypid,NULL);            psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Debug, "%s %d: qypid =NULL\r\n",__FUNCTION__,__LINE__,qypid);        }        psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Fatal, "%s %d: url = %s,file_path = %s,user_uuid = %s,fid = %s\r\n",__FUNCTION__,__LINE__,url,file_path,user_uuid,fid);        IHCDNDownloaderTask* hcdntask = NULL;        hcdntask = gIHCDNDownloaderCreator->CreateTask(url,file_size,file_path,user_uuid,qypid,fid);        if(NULL == hcdntask)        {            psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Fatal, "%s %d: gIHCDNDownloaderCreator->CreateTask failed\r\n",__FUNCTION__,__LINE__);            return NULL;        }        jobject jtask= NULL;        jclass cls = env->FindClass("com/qiyi/hcdndownloader/HCDNDownloaderTask");        if (NULL == cls)         {            psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Fatal, "%s %d: NULL == localRefCls\r\n",__FUNCTION__,__LINE__);            gIHCDNDownloaderCreator->DestroryTask(hcdntask);            env->DeleteLocalRef(cls);            return NULL;        }        jmethodID mid = env->GetMethodID(cls,"<init>","()V");        if(NULL == mid)        {            psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Fatal, "%s %d: NULL == mid\r\n",__FUNCTION__,__LINE__);            return NULL;        }        jtask=env->NewObject(cls,mid);        if(NULL == jtask)        {            psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Fatal, "%s %d: NULL == jtask\r\n",__FUNCTION__,__LINE__);            gIHCDNDownloaderCreator->DestroryTask(hcdntask);            env->DeleteLocalRef(cls);            return NULL;        }        else        {            psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Fatal, "%s %d: jtask creat success,hcdntask = %p\r\n",__FUNCTION__,__LINE__,hcdntask);            jfieldID fid = env->GetFieldID( cls, "jtaskptr", "J");            if (fid != 0)            {                jlong taskptr = (jlong)hcdntask;                env->SetLongField( jtask, fid, taskptr);             }        }        env->DeleteLocalRef(cls);        env->ReleaseStringUTFChars(jurl,url);        env->ReleaseStringUTFChars(jfid,fid);        env->ReleaseStringUTFChars(juser_uuid,user_uuid);        env->ReleaseStringUTFChars(jfile_path,file_path);        if(NULL != file_size)            env->ReleaseStringUTFChars(jfile_size,file_size);        if(NULL != qypid)            env->ReleaseStringUTFChars(jqypid,qypid);        return jtask;    }	JNIEXPORT jobject JNICALL Java_com_qiyi_hcdndownloader_HCDNDownloaderCreator_CreateNormalTaskNative(JNIEnv * env		, jobject creator        , jstring jurl        , jstring jfile_size        , jstring jfile_path        , jstring juser_uuid        , jstring jqypid        , jstring jfid		, jboolean jBForceCurl)	{		if(NULL == gIHCDNDownloaderCreator)        {            psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Fatal, "%s %d: gIHCDNDownloaderCreator not init\r\n",__FUNCTION__,__LINE__);            return NULL;        }	        if((NULL == env)||(NULL == jurl)||(NULL == jfile_path)||(NULL == juser_uuid)||(NULL == jfid))        {            psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Fatal, "%s %d: param not enough\r\n",__FUNCTION__,__LINE__);            return NULL;        }        const char *file_size;        const char *qypid;        const char *url = env->GetStringUTFChars(jurl,NULL);        const char *fid = env->GetStringUTFChars(jfid,NULL);        const char *user_uuid = env->GetStringUTFChars(juser_uuid,NULL);        const char *file_path = env->GetStringUTFChars(jfile_path,NULL);        if(NULL == jfile_size)        {            file_size = NULL;            psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Debug, "%s %d: NULL == jfile_size\r\n",__FUNCTION__,__LINE__);        }        else         {            file_size = env->GetStringUTFChars(jfile_size,NULL);            if(0 == strcmp(file_size,"0"))            {                env->ReleaseStringUTFChars(jfile_size,file_size);                file_size =NULL;                psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Debug, "%s %d: file_size =NULL\r\n",__FUNCTION__,__LINE__);            }            else            {                psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Debug, "%s %d: file_size = %s\r\n",__FUNCTION__,__LINE__,file_size);            }        }        if(NULL == jqypid)        {            qypid = NULL;            psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Debug, "%s %d: NULL == jqypid\r\n",__FUNCTION__,__LINE__);        }        else         {            qypid = env->GetStringUTFChars(jqypid,NULL);            psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Debug, "%s %d: qypid =NULL\r\n",__FUNCTION__,__LINE__,qypid);        }        psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Fatal, "%s %d: url = %s,file_path = %s,user_uuid = %s,fid = %s\r\n",__FUNCTION__,__LINE__,url,file_path,user_uuid,fid);        IHCDNDownloaderTask* hcdntask = NULL;        hcdntask = gIHCDNDownloaderCreator->CreateTask(url,file_size,file_path,user_uuid,qypid,fid,jBForceCurl);        if(NULL == hcdntask)        {            psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Fatal, "%s %d: gIHCDNDownloaderCreator->CreateTask failed\r\n",__FUNCTION__,__LINE__);            return NULL;        }        jobject jtask= NULL;        jclass cls = env->FindClass("com/qiyi/hcdndownloader/HCDNDownloaderTask");        if (NULL == cls)         {            psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Fatal, "%s %d: NULL == localRefCls\r\n",__FUNCTION__,__LINE__);            gIHCDNDownloaderCreator->DestroryTask(hcdntask);            env->DeleteLocalRef(cls);            return NULL;        }        jmethodID mid = env->GetMethodID(cls,"<init>","()V");        if(NULL == mid)        {            psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Fatal, "%s %d: NULL == mid\r\n",__FUNCTION__,__LINE__);            return NULL;        }        jtask=env->NewObject(cls,mid);        if(NULL == jtask)        {            psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Fatal, "%s %d: NULL == jtask\r\n",__FUNCTION__,__LINE__);            gIHCDNDownloaderCreator->DestroryTask(hcdntask);            env->DeleteLocalRef(cls);            return NULL;        }        else        {            psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Fatal, "%s %d: jtask creat success,hcdntask = %p\r\n",__FUNCTION__,__LINE__,hcdntask);            jfieldID fid = env->GetFieldID( cls, "jtaskptr", "J");            if (fid != 0)            {                jlong taskptr = (jlong)hcdntask;                env->SetLongField( jtask, fid, taskptr);             }        }        env->DeleteLocalRef(cls);        env->ReleaseStringUTFChars(jurl,url);        env->ReleaseStringUTFChars(jfid,fid);        env->ReleaseStringUTFChars(juser_uuid,user_uuid);        env->ReleaseStringUTFChars(jfile_path,file_path);        if(NULL != file_size)            env->ReleaseStringUTFChars(jfile_size,file_size);        if(NULL != qypid)            env->ReleaseStringUTFChars(jqypid,qypid);        return jtask;	}	    JNIEXPORT jobject JNICALL Java_com_qiyi_hcdndownloader_HCDNDownloaderCreator_CreateTaskWithADNative(JNIEnv * env        , jobject creator        , jstring jalbumid        , jstring jtvid        , jstring jvid        , jstring jfile_path        , jstring juser_uuid        , jstring jpassport_id        , jstring jpassport_cookie        , jstring jqypid        , jboolean jvip        , jint jpage_type        , jint jplayback_scene        , jint juser_type        , jboolean jis_offline_video        , jboolean jis_downloading        , jint jdefinition        , jint jnet_status        , jint juser_vip_type)    {        if(NULL == gIHCDNDownloaderCreator)        {            psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Fatal, "%s %d: gIHCDNDownloaderCreator not init\r\n",__FUNCTION__,__LINE__);            return NULL;        }        if((NULL == env)||(NULL == jalbumid)||(NULL == jtvid)||(NULL == jvid)||(NULL == juser_uuid)||(NULL == jfile_path)||(NULL == jqypid))        {            psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Fatal, "%s %d: param not enough\r\n",__FUNCTION__,__LINE__);            return NULL;        }        const char *passport_id = NULL;        const char *passport_cookie = NULL;        const char *albumid = env->GetStringUTFChars(jalbumid,NULL);        const char *tvid = env->GetStringUTFChars(jtvid,NULL);        const char *vid = env->GetStringUTFChars(jvid,NULL);        const char *user_uuid = env->GetStringUTFChars(juser_uuid,NULL);        const char *file_path = env->GetStringUTFChars(jfile_path,NULL);        const char *qypid = env->GetStringUTFChars(jqypid,NULL);        if(NULL == jpassport_id)        {            passport_id = NULL;            psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Debug, "%s %d: NULL == jpassport_id\r\n",__FUNCTION__,__LINE__);        }        else         {            passport_id = env->GetStringUTFChars(jpassport_id,NULL);            if(0 == strcmp(passport_id,""))            {                env->ReleaseStringUTFChars(jpassport_id,passport_id);                passport_id = NULL;                psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Fatal, "%s %d: passport_id = empty\r\n",__FUNCTION__,__LINE__);            }            else            {                psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Debug, "%s %d: passport_id =%s\r\n",__FUNCTION__,__LINE__,passport_id);            }        }        if(NULL == jpassport_cookie)        {            passport_cookie = NULL;            psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Debug, "%s %d: NULL == jpassport_cookie\r\n",__FUNCTION__,__LINE__);        }        else         {            passport_cookie = env->GetStringUTFChars(jpassport_cookie,NULL);            if(0 == strcmp(passport_cookie,""))            {                env->ReleaseStringUTFChars(jpassport_cookie,passport_cookie);                passport_cookie = NULL;                psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Fatal, "%s %d: passport_cookie = empty\r\n",__FUNCTION__,__LINE__);            }            else            {			                psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Debug, "%s %d: passport_cookie =%s\r\n",__FUNCTION__,__LINE__,passport_cookie);            }        }        psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Fatal, "%s %d: albumid = %s,tvid = %s,vid = %s,file_path = %s,user_uuid = %s,qypid = %s,\r\n"																						,__FUNCTION__,__LINE__,																						albumid,tvid,vid,file_path,user_uuid,qypid);																						        psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Fatal, "%s %d: jpage_type = %d, jplayback_scene = %d, juser_type = %d,jis_offline_video = %d,jis_downloading = %d,jdefinition = %d,jnet_status = %d,juser_vip_type = %d\r\n"																						, __FUNCTION__,__LINE__																						, jpage_type																						, jplayback_scene																						, juser_type																						, jis_offline_video																						, jis_downloading																						, jdefinition																						, jnet_status																						, juser_vip_type);        IHCDNDownloaderTask* hcdntask =NULL;        hcdntask = gIHCDNDownloaderCreator->CreateTwoOfflineTask(albumid            , tvid            , vid            , file_path            , user_uuid            , passport_id            , passport_cookie            , qypid            , jvip            , jpage_type            , jplayback_scene            , juser_type            , jis_offline_video            , jis_downloading            , jdefinition            , jnet_status            , juser_vip_type);        if(NULL == hcdntask)        {            psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Fatal, "%s %d: gIHCDNDownloaderCreator->CreateTask failed\r\n",__FUNCTION__,__LINE__);            return NULL;        }        psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Fatal, "%s %d: CreateTask end\r\n",__FUNCTION__,__LINE__);        jobject jtask= NULL;        jclass cls = env->FindClass("com/qiyi/hcdndownloader/HCDNDownloaderTask");        if (NULL == cls)         {            psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Fatal, "%s %d: NULL == localRefCls\r\n",__FUNCTION__,__LINE__);            gIHCDNDownloaderCreator->DestroryTask(hcdntask);            env->DeleteLocalRef(cls);            return NULL;        }        jmethodID mid = env->GetMethodID(cls,"<init>","()V");        if(NULL == mid)        {            psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Fatal, "%s %d: NULL == mid\r\n",__FUNCTION__,__LINE__);            return NULL;        }        jtask=env->NewObject(cls,mid);        if(NULL == jtask)        {            psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Fatal, "%s %d: NULL == jtask\r\n",__FUNCTION__,__LINE__);            gIHCDNDownloaderCreator->DestroryTask(hcdntask);            env->DeleteLocalRef(cls);            return NULL;        }        else        {            psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Fatal, "%s %d: jtask creat success,hcdntask = %p\r\n",__FUNCTION__,__LINE__,hcdntask);            jfieldID fid = env->GetFieldID( cls, "jtaskptr", "J");            if (fid != 0)            {                jlong taskptr = (jlong)hcdntask;                env->SetLongField( jtask, fid, taskptr);             }        }        env->DeleteLocalRef(cls);        env->ReleaseStringUTFChars(jalbumid,albumid);        env->ReleaseStringUTFChars(jtvid,tvid);        env->ReleaseStringUTFChars(jvid,vid);        env->ReleaseStringUTFChars(juser_uuid,user_uuid);        env->ReleaseStringUTFChars(jfile_path,file_path);        env->ReleaseStringUTFChars(jqypid,qypid);        if(NULL != passport_id)            env->ReleaseStringUTFChars(jpassport_id,passport_id);        if(NULL != passport_cookie)            env->ReleaseStringUTFChars(jpassport_cookie,passport_cookie);        return jtask;    }    JNIEXPORT jboolean JNICALL Java_com_qiyi_hcdndownloader_HCDNDownloaderCreator_DestroryTaskNative(JNIEnv *env        , jobject creator        , jobject jtask)    {        if((NULL == env)||(NULL == jtask))            return JNI_FALSE;        if(NULL == gIHCDNDownloaderCreator)            return JNI_FALSE;			        IHCDNDownloaderTask* task = gettaskptrbyjava(env,jtask);        if(NULL == task)        {            psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Fatal, "%s %d: taskptr = NULL\r\n",__FUNCTION__,__LINE__);            return JNI_FALSE;        }				psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Fatal, "%s %d: taskptr = %p\r\n",__FUNCTION__,__LINE__,task);        bool brt = gIHCDNDownloaderCreator->DestroryTask(task);		if(brt&&gCubeTaskCallBackImpl)        {			gCubeTaskCallBackImpl->UnAdviseJavaCallBack(task);        }        do        {            jclass cls = env->FindClass("com/qiyi/hcdndownloader/HCDNDownloaderTask");            if (NULL == cls)             {                psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Fatal, "%s %d: NULL == localRefCls\r\n",__FUNCTION__,__LINE__);                env->DeleteLocalRef(cls);                break;            }            jfieldID fid = env->GetFieldID( cls, "jtaskptr", "J");            if (fid != 0)            {                jlong taskptr = (jlong)0;                env->SetLongField( jtask, fid, taskptr);             }            env->DeleteLocalRef(cls);        }while(false);        return brt?JNI_TRUE:JNI_FALSE;    }    JNIEXPORT jboolean JNICALL Java_com_qiyi_hcdndownloader_HCDNDownloaderCreator_InitHCDNDownloaderCreatorNative(JNIEnv * env        , jobject obj        ,jint pf1        ,jint pf2        ,jint p1        ,jstring jlibhcdnpath        ,jstring jlibkeypath        ,jstring jlibcurlpath)    {        psl::AutoLock Alock(g_JNIlock);        if(g_iJNIRefCount>0)        {            ++g_iJNIRefCount;        }        else        {            if(NULL == env)                return JNI_FALSE;            HCDNEnvironment hcdnenv;            hcdnenv.pf1 = pf1;            hcdnenv.pf2 = pf2;            hcdnenv.p1 = p1;            const char *libhcdnpath = NULL;            const char *libkeypath = NULL;            const char *libcurlpath = NULL;#ifdef CUPID_TEST_			__android_log_print(ANDROID_LOG_DEBUG,LOG_HCDNDOWNLOADER_CREATOREX,"%s %d: before CreateCupid \r\n",__FUNCTION__,__LINE__);			if (!CCupidHelper::LoadDll())			{				__android_log_print(ANDROID_LOG_DEBUG,LOG_HCDNDOWNLOADER_CREATOREX,"%s CCupidHelper LoadDll failed \r\n",__FUNCTION__);				assert(false);				return false;			}						CUPID::CupidInitParam initp;			initp.client = CLIENT_PPS;			initp.client_type = CLIENT_TYPE_GPHONE;			initp.db_path = "/sdcard/testad";			CCupidHelper::CreateCupid(initp);			__android_log_print(ANDROID_LOG_DEBUG,LOG_HCDNDOWNLOADER_CREATOREX,"%s %d: after CreateCupid \r\n",__FUNCTION__,__LINE__);#endif			            if(NULL != jlibhcdnpath)	            {                libhcdnpath = env->GetStringUTFChars(jlibhcdnpath,NULL);            }            if(NULL != jlibkeypath)	            {                libkeypath = env->GetStringUTFChars(jlibkeypath,NULL);            }            if(NULL != jlibcurlpath)	            {                libcurlpath = env->GetStringUTFChars(jlibcurlpath,NULL);            }            gIHCDNDownloaderCreator = InitHCDNDownloaderCreator(hcdnenv,libhcdnpath,libkeypath,libcurlpath);            if(NULL != libhcdnpath)	            {                env->ReleaseStringUTFChars(jlibhcdnpath,libhcdnpath);            }            if(NULL != libkeypath)	            {                env->ReleaseStringUTFChars(jlibkeypath,libkeypath);            }            if(NULL != libcurlpath)	            {                env->ReleaseStringUTFChars(jlibcurlpath,libcurlpath);            }            ++g_iJNIRefCount;        }        psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Fatal,"%s %d:g_iJNIRefCount = %d\r\n",__FUNCTION__,__LINE__,g_iJNIRefCount);		if(NULL == gCubeTaskCallBackImpl)			gCubeTaskCallBackImpl = new CCubeTaskCallBackImpl();        if(gIHCDNDownloaderCreator)            return JNI_TRUE;        else             return JNI_FALSE;    }	    JNIEXPORT jboolean JNICALL Java_com_qiyi_hcdndownloader_HCDNDownloaderCreator_InitCubeCreatorNative(JNIEnv * env            , jobject obj            , jint pf1            , jint pf2            , jint p1            , jstring jpartner            , jstring jlicence            , jstring jdomain            , jstring jlibhcdnpath            , jstring jlibkeypath            , jstring jlibcurlpath)    {        psl::AutoLock Alock(g_JNIlock);        if(g_iJNIRefCount>0)        {            ++g_iJNIRefCount;        }        else        {            if(NULL == env)                return JNI_FALSE;            HCDNEnvironment hcdnenv;            hcdnenv.pf1 = pf1;            hcdnenv.pf2 = pf2;            hcdnenv.p1 = p1;			const char *partner = NULL;			const char *licence = NULL;			const char *domain = NULL;			#ifdef CUPID_TEST_			__android_log_print(ANDROID_LOG_DEBUG,LOG_HCDNDOWNLOADER_CREATOREX,"%s %d: before CreateCupid \r\n",__FUNCTION__,__LINE__);			if (!CCupidHelper::LoadDll())			{				__android_log_print(ANDROID_LOG_DEBUG,LOG_HCDNDOWNLOADER_CREATOREX,"%s CCupidHelper LoadDll failed \r\n",__FUNCTION__);				assert(false);				return false;			}						CUPID::CupidInitParam initp;			initp.client = CLIENT_PPS;			initp.client_type = CLIENT_TYPE_GPHONE;			initp.db_path = "/sdcard/testad";			CCupidHelper::CreateCupid(initp);			__android_log_print(ANDROID_LOG_DEBUG,LOG_HCDNDOWNLOADER_CREATOREX,"%s %d: after CreateCupid \r\n",__FUNCTION__,__LINE__);#endif						if(NULL != jpartner)	            {                partner = env->GetStringUTFChars(jpartner,NULL);				int partnerlen = strlen(partner);				if(partnerlen >=32)					partnerlen = 32-1;								memcpy(hcdnenv.partner,partner,partnerlen);				env->ReleaseStringUTFChars(jpartner,partner);            }						if(NULL != jlicence)	            {                licence = env->GetStringUTFChars(jlicence,NULL);				int licencelen = strlen(licence);				if(licencelen >=32)					licencelen = 32-1;								memcpy(hcdnenv.licence,licence,licencelen);				env->ReleaseStringUTFChars(jlicence,licence);            }						if(NULL != jdomain)	            {                domain = env->GetStringUTFChars(jdomain,NULL);				int domainlen = strlen(domain);				if(domainlen >=32)					domainlen = 64-1;								memcpy(hcdnenv.domain,domain,domainlen);				env->ReleaseStringUTFChars(jdomain,domain);            }            const char *libhcdnpath = NULL;            const char *libkeypath = NULL;            const char *libcurlpath = NULL;			            if(NULL != jlibhcdnpath)	            {                libhcdnpath = env->GetStringUTFChars(jlibhcdnpath,NULL);            }            if(NULL != jlibkeypath)	            {                libkeypath = env->GetStringUTFChars(jlibkeypath,NULL);            }            if(NULL != jlibcurlpath)	            {                libcurlpath = env->GetStringUTFChars(jlibcurlpath,NULL);            }            gIHCDNDownloaderCreator = InitHCDNDownloaderCreator(hcdnenv,libhcdnpath,libkeypath,libcurlpath);            if(NULL != libhcdnpath)	            {                env->ReleaseStringUTFChars(jlibhcdnpath,libhcdnpath);            }            if(NULL != libkeypath)	            {                env->ReleaseStringUTFChars(jlibkeypath,libkeypath);            }            if(NULL != libcurlpath)	            {                env->ReleaseStringUTFChars(jlibcurlpath,libcurlpath);            }            ++g_iJNIRefCount;        }        psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Fatal,"%s %d:g_iJNIRefCount = %d\r\n",__FUNCTION__,__LINE__,g_iJNIRefCount);		if(NULL == gCubeTaskCallBackImpl)			gCubeTaskCallBackImpl = new CCubeTaskCallBackImpl();		        if(gIHCDNDownloaderCreator)            return JNI_TRUE;        else             return JNI_FALSE;    }	    JNIEXPORT jboolean JNICALL Java_com_qiyi_hcdndownloader_HCDNDownloaderCreator_DestroyHCDNDownloaderCreatorNative(JNIEnv * env , jobject creator)    {        psl::AutoLock Alock(g_JNIlock);        if(NULL == env)            return JNI_FALSE;					psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Fatal,"%s %d:g_iJNIRefCount = %d\r\n",__FUNCTION__,__LINE__,g_iJNIRefCount);			        if(g_iJNIRefCount>0)        {            --g_iJNIRefCount;            if(g_iJNIRefCount == 0)            {	                bool brt = DestroyHCDNDownloaderCreator(gIHCDNDownloaderCreator);                gIHCDNDownloaderCreator = NULL;								if(NULL != gCubeTaskCallBackImpl)				{					delete gCubeTaskCallBackImpl;					gCubeTaskCallBackImpl = NULL;				}				                return brt?JNI_TRUE:JNI_FALSE;            }            else            {                return JNI_TRUE;            }        }        else        {            return JNI_FALSE;        }    }    JNIEXPORT jstring JNICALL Java_com_qiyi_hcdndownloader_HCDNDownloaderCreator_GetParamNative(JNIEnv * env        , jobject creator        , jstring jparamname)    {        std::string strparamvalue;        if(NULL == gIHCDNDownloaderCreator)        {            psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_TASKEX,psl::logger::_Fatal, "%s %d: jparamname is not enough or env is null\r\n",__FUNCTION__,__LINE__);            return env->NewStringUTF(strparamvalue.c_str());        }        if((NULL == env)||(NULL == jparamname))        {            psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_TASKEX,psl::logger::_Fatal, "%s %d: jparamname is not enough or env is null\r\n",__FUNCTION__,__LINE__);            return env->NewStringUTF(strparamvalue.c_str());        }        const char *szparamname = env->GetStringUTFChars(jparamname,NULL);        psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_TASKEX,psl::logger::_Fatal, "%s %d: szparamname = %s\r\n",__FUNCTION__,__LINE__,szparamname);        int parambufflen = CUBE_GETPARAM_PRIMELEN;        char* parambuff = NULL;        parambuff = new char[parambufflen];        memset(parambuff,0,parambufflen);        int gtpresult = gIHCDNDownloaderCreator->GetParam(szparamname,parambuff,&parambufflen);        if(0 != gtpresult)        {            if(parambufflen > CUBE_GETPARAM_PRIMELEN)            {                if(parambuff)                {                    delete[] parambuff;                    parambuff = NULL;                }                parambufflen += 1024;                parambuff = new char[parambufflen];                if(parambuff)                {                    memset(parambuff,0,parambufflen);                    gtpresult = gIHCDNDownloaderCreator->GetParam(szparamname,parambuff,&parambufflen);                    psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_TASKEX,psl::logger::_Fatal, "%s %d: parambuff = %s\r\n",__FUNCTION__,__LINE__,parambuff);                    if(0 == gtpresult)                        strparamvalue = parambuff;                }            }        }        else        {            strparamvalue = parambuff;        }        if(parambuff)        {            psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_TASKEX,psl::logger::_Fatal, "%s %d: parambuff = %s\r\n",__FUNCTION__,__LINE__,parambuff);            delete[] parambuff;            parambuff = NULL;        }        env->ReleaseStringUTFChars(jparamname,szparamname);        return env->NewStringUTF(strparamvalue.c_str());    }    JNIEXPORT jint JNICALL Java_com_qiyi_hcdndownloader_HCDNDownloaderCreator_SetParamNative(JNIEnv * env        , jobject creator        , jstring jparamname        , jstring jparamvalue)    {        if(NULL == gIHCDNDownloaderCreator)        {            return -1;        }        if((NULL == env)||(NULL == jparamname)||(NULL == jparamvalue))        {            return -1;        }        const char *szparamname = env->GetStringUTFChars(jparamname,NULL);        const char *szparamvalue = env->GetStringUTFChars(jparamvalue,NULL);        int setresult = 0;        setresult = gIHCDNDownloaderCreator->SetParam(szparamname,szparamvalue);        env->ReleaseStringUTFChars(jparamname,szparamname);        env->ReleaseStringUTFChars(jparamvalue,szparamvalue);        return setresult;    }    JNIEXPORT void JNICALL Java_com_qiyi_hcdndownloader_HCDNDownloaderCreator_SetCubeParamNative(JNIEnv * env        , jclass creator        , jstring jparamname        , jstring jparamvalue)    {        if((NULL == env)||(NULL == jparamname)||(NULL == jparamvalue))        {            return;        }        const char *szparamname = env->GetStringUTFChars(jparamname,NULL);        const char *szparamvalue = env->GetStringUTFChars(jparamvalue,NULL);        SetCubeParam(szparamname,szparamvalue);        env->ReleaseStringUTFChars(jparamname,szparamname);        env->ReleaseStringUTFChars(jparamvalue,szparamvalue);        return;    }    JNIEXPORT jstring JNICALL Java_com_qiyi_hcdndownloader_HCDNDownloaderCreator_GetVersion(JNIEnv * env , jclass creator)    {        std::string strversion;		strversion = GetCubeVersion();        return env->NewStringUTF(strversion.c_str());    }		JNIEXPORT jstring JNICALL Java_com_qiyi_hcdndownloader_HCDNDownloaderCreator_GetInterfaceVersionNative(JNIEnv *env, jclass creator)	{		std::string strInterfaceVersion = "2.4";        return env->NewStringUTF(strInterfaceVersion.c_str());	}    JNIEXPORT jboolean JNICALL Java_com_qiyi_hcdndownloader_HCDNDownloaderCreator_StartCubeNative(JNIEnv *env, jobject creator)    {        psl::AutoLock Alock(g_JNIlock);        if(g_iJNIRefCount>0)        {            ++g_iJNIRefCount;        }        else        {            if(NULL == env)                return JNI_FALSE;            gIHCDNDownloaderCreator = StartCube();            ++g_iJNIRefCount;        }        psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Fatal,"%s %d:g_iJNIRefCount = %d\r\n",__FUNCTION__,__LINE__,g_iJNIRefCount);        if(NULL == gCubeTaskCallBackImpl)            gCubeTaskCallBackImpl = new CCubeTaskCallBackImpl();        if(gIHCDNDownloaderCreator)            return JNI_TRUE;        else             return JNI_FALSE;    }    JNIEXPORT jboolean JNICALL Java_com_qiyi_hcdndownloader_HCDNDownloaderCreator_StopCubeNative(JNIEnv *env, jobject creator)    {        psl::AutoLock Alock(g_JNIlock);        if(NULL == env)            return JNI_FALSE;        psl::logger::CLogger::PrintA(LOG_HCDNDOWNLOADER_CREATOREX,psl::logger::_Fatal,"%s %d:g_iJNIRefCount = %d\r\n",__FUNCTION__,__LINE__,g_iJNIRefCount);        if(g_iJNIRefCount>0)        {            --g_iJNIRefCount;            if(g_iJNIRefCount == 0)            {	                bool brt = StopCube();                gIHCDNDownloaderCreator = NULL;                if(NULL != gCubeTaskCallBackImpl)                {                    delete gCubeTaskCallBackImpl;                    gCubeTaskCallBackImpl = NULL;                }                return brt?JNI_TRUE:JNI_FALSE;            }            else            {                return JNI_TRUE;            }        }        else        {            return JNI_FALSE;        }    }#ifdef __cplusplus  }  #endif  